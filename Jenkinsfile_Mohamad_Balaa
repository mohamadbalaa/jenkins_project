pipeline {
    agent any
    environment {
VIRTUAL_ENV = 'venv' }
    stages {
        stage('Setup') {
            steps {
                script {
                    if (!fileExists("${env.WORKSPACE}\\${VIRTUAL_ENV}")) {
                        bat "python -m venv ${VIRTUAL_ENV}"
                    }
                    bat "${VIRTUAL_ENV}\\Scripts\\activate && pip install -r requirements.txt"
                }
            }
        }
        stage('Lint') {
            steps {
                script {
                    bat "${VIRTUAL_ENV}\\Scripts\\activate && flake8 app.py"
                }
            }
        }
        stage('Test') {
            steps {
                script {
                    bat "${VIRTUAL_ENV}\\Scripts\\activate && pytest"
                }
            }
        }
        stage('Coverage'){
            steps {
                script {
                    bat "${VIRTUAL_ENV}\\Scripts\\activate && coverage run -m pytest"
                    bat "${VIRTUAL_ENV}\\Scripts\\activate && coverage report"
                    bat "${VIRTUAL_ENV}\\Scripts\\activate && coverage html"
                }
            }
            post {
                success {
                    archiveArtifacts artifacts: 'htmlcov/**', fingerprint: true
                }
            }
        }
        stage('Security Scan') {
            steps {
                script {
                    bat "${VIRTUAL_ENV}\\Scripts\\activate && bandit -r . --exit-zero --format html -o bandit-report.html"
                }
            }
            post {
                success {
                    echo 'Security scan completed successfully.'
                    archiveArtifacts artifacts: 'bandit-report.html', fingerprint: true
                }
            }
        }
        stage('Deploy') {
            steps {
                script {
                    echo 'Deploying application locally...'
                    bat "${VIRTUAL_ENV}\\Scripts\\activate && python app.py"
                }
            }
        }
    }
    post {
        always {
            cleanWs()
        }
    }
}
